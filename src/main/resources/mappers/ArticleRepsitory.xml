<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.demo.repository.ArticleRepository">

	<insert id="writeArticle" parameterType="map">
		INSERT INTO article
		SET
		regDate = NOW(),
		updateDate = NOW(),
		title = #{title},
		body = #{body},
		memberId = #{memberId},
		boardId = #{boardId}
	</insert>

	<insert id="setArticleHitCount" parameterType="map">
		UPDATE article
		SET
		hitCount = #{hitCount}
		WHERE id = #{id}
	</insert>

	<delete id="deleteArticle" parameterType="int">
		DELETE FROM article
		WHERE id = #{id}
	</delete>

	<select id="getLastInsertId" parameterType="int">
		SELECT
		LAST_INSERT_ID()
	</select>

	<update id="modifyArticle" parameterType="map">
		UPDATE article

		<set>
			<if test="title != null and title != ''">title = #{title},</if>
			<if test="body != null and body != ''">`body` = #{body},</if>
			updateDate = NOW()
		</set>
		WHERE id = #{id}
	</update>
	<select id="getForPrintArticle" parameterType="int"
		resultType="com.example.demo.vo.Article">
		SELECT A.*, M.nickname AS extra__writer,
		IFNULL(SUM(RP.point),0) AS extra__sumReactionPoint,
		IFNULL(SUM(IF(RP.point &gt; 0, RP.point, 0)),0) AS
		extra__goodReactionPoint,
		IFNULL(SUM(IF(RP.point &lt; 0, RP.point,
		0)),0) AS extra__badReactionPoint
		FROM article AS A
		INNER JOIN `member`
		AS M
		ON A.memberId = M.id
		LEFT JOIN reactionPoint AS RP
		ON A.id =
		RP.relId AND RP.relTypeCode = 'article'
		WHERE A.id = #{id}

	</select>

	<select id="getArticleById" parameterType="int"
		resultType="com.example.demo.vo.Article">
		SELECT A.*, M.name AS extra__writer, B.name AS
		extra__boardName
		FROM article AS A
		INNER JOIN `member` AS M
		ON A.memberId
		= M.id
		INNER JOIN board AS B
		ON A.boardId = B.id
		WHERE A.id =#{id}
	</select>

	<select id="getArticles"
		resultType="com.example.demo.vo.Article">
		SELECT A.*, M.name AS extra__writer, B.name AS
		extra__boardName
		FROM article AS A
		INNER JOIN `member` AS M
		ON A.memberId
		= M.id
		INNER JOIN board AS B
		ON A.boardId = B.id
		ORDER BY id DESC
		LIMIT
		${limitFrom}, ${viewArticleCount}
	</select>

	<select id="getArticlesByBoardId"
		resultType="com.example.demo.vo.Article">
		SELECT A.*, M.name AS extra__writer, B.name AS extra__boardName,
		IFNULL(SUM(RP.point),0) AS extra__sumReactionPoint,
		IFNULL(SUM(IF(RP.point &gt; 0, RP.point, 0)),0) AS
		extra__goodReactionPoint,
		IFNULL(SUM(IF(RP.point &lt; 0, RP.point,
		0)),0) AS extra__badReactionPoint
		FROM
		article AS A
		INNER JOIN `member`
		AS M
		ON A.memberId = M.id
		INNER JOIN
		board AS B
		ON A.boardId = B.id
		LEFT JOIN reactionPoint AS RP
		ON A.id = RP.relId AND RP.relTypeCode ='article'

		<if test="keyword.length() != 0">
			<if test="keywordType.equals('title')">
				WHERE A.title LIKE '%${keyword}%'
			</if>
			<if test="keywordType.equals('body')">
				WHERE A.body LIKE '%${keyword}%'
			</if>

			<if test="keywordType.equals('writer')">
				WHERE M.name LIKE '%${keyword}%'
			</if>

		</if>
		<if test="boardId != 0">AND A.boardId = ${boardId}</if>
		GROUP BY A.id
		ORDER BY id DESC
		LIMIT ${limitFrom}, ${viewArticleCount}
	</select>


	<select id="getTotalArticleCount" resultType="int">
		SELECT COUNT(*)
		FROM article AS A
		INNER JOIN `member` AS M
		ON A.memberId=
		M.id
		INNER JOIN
		board AS B
		ON A.boardId = B.id
		<if test="keyword.length() != 0">
			<if test="keywordType.equals('title')">
				WHERE A.title LIKE '%${keyword}%'
			</if>
			<if test="keywordType.equals('body')">
				WHERE A.body LIKE '%${keyword}%'
			</if>

			<if test="keywordType.equals('writer')">
				WHERE M.name LIKE '%${keyword}%'
			</if>

		</if>

		<if test="boardId != 0">AND boardId = ${boardId}</if>
	</select>

</mapper>